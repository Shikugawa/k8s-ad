version: 2
jobs:
  build:
    working_directory: ./app
    environment:
      PROJECT_NAME: PROJECT_NAME
      CLUSTER_NAME: CLUSTER_NAME
      CLOUDSDK_COMPUTE_ZONE: asia-northeast1-a
      GOOGLE_APPLICATION_CREDENTIALS: ${HOME}/account-auth.json
    docker:
      - image: google/cloud-sdk:171.0.0-alpine
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add py-pip gettext
            pip install docker-compose
            gcloud components install kubectl
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.05.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin
      - run:
          name: Check docker version
          command: |
            docker version
      - run:
          name: Build application Docker image
          command: |
            docker build --cache-from=asia.gcr.io/${PROJECT_NAME}/adtech-node:latest -t asia.gcr.io/${PROJECT_NAME}/adtech-node:${CIRCLE_SHA1} ./node
            docker tag asia.gcr.io/${PROJECT_NAME}/adtech-node:${CIRCLE_SHA1} asia.gcr.io/${PROJECT_NAME}/adtech-node:latest
      - run:
          name: Build API Docker image
          command: |
            docker build --cache-from=asia.gcr.io/${PROJECT_NAME}/adtech-python:latest -t asia.gcr.io/${PROJECT_NAME}/adtech-python:${CIRCLE_SHA1} ./python
            docker tag asia.gcr.io/${PROJECT_NAME}/adtech-python:${CIRCLE_SHA1} asia.gcr.io/${PROJECT_NAME}/adtech-python:latest
      - deploy:
          name: Deploy application Docker image
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              echo $ACCT_AUTH | base64 -d > ${HOME}/account-auth.json
              gcloud auth activate-service-account --key-file ${HOME}/account-auth.json
              gcloud config set project $PROJECT_NAME
              gcloud --quiet config set container/cluster $CLUSTER_NAME
              gcloud config set compute/zone ${CLOUDSDK_COMPUTE_ZONE}
              gcloud --quiet container clusters get-credentials $CLUSTER_NAME
              gcloud config set container/use_client_certificate True
              ./deploy.sh
            fi
            